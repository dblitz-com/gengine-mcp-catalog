name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'feature/*', 'hotfix/*']
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/gengine-rest-api
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Security and dependency scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep

      - name: Run Safety (dependency vulnerabilities)
        run: |
          pip install -r src/gengines/gengine-rest-api-to-mcp/requirements.txt
          safety check --json --output safety-report.json || true

      - name: Run Bandit (code security)
        run: |
          bandit -r src/gengines/gengine-rest-api-to-mcp/ -f json -o bandit-report.json || true

      - name: Run Semgrep
        run: |
          semgrep --config=auto src/gengines/gengine-rest-api-to-mcp/ --json --output=semgrep-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
            semgrep-report.json

  # Code quality and testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    services:
      docker:
        image: docker:24-dind
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd src/gengines/gengine-rest-api-to-mcp
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Run unit tests
        run: |
          cd src/gengines/gengine-rest-api-to-mcp
          pytest tests/ --cov=api --cov-report=xml --cov-report=html -v

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: src/gengines/gengine-rest-api-to-mcp/coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Start services for integration tests
        run: |
          cd src/gengines/gengine-rest-api-to-mcp
          docker-compose up -d
          sleep 10

      - name: Run integration tests
        run: |
          cd src/gengines/gengine-rest-api-to-mcp
          python -m pytest tests/integration/ -v

      - name: Cleanup
        if: always()
        run: |
          cd src/gengines/gengine-rest-api-to-mcp
          docker-compose down -v

  # Build and push Docker images
  build:
    name: Build and Push
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: src/gengines/gengine-rest-api-to-mcp
          file: src/gengines/gengine-rest-api-to-mcp/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          fail-build: false
          severity-cutoff: high

  # Deploy to development environment
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, container-scan]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://dev-api.gengine.company.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install Nomad CLI
        run: |
          wget https://releases.hashicorp.com/nomad/1.7.2/nomad_1.7.2_linux_amd64.zip
          unzip nomad_1.7.2_linux_amd64.zip
          sudo mv nomad /usr/local/bin/

      - name: Deploy to Nomad
        env:
          NOMAD_ADDR: ${{ secrets.NOMAD_ADDR_DEV }}
          NOMAD_TOKEN: ${{ secrets.NOMAD_TOKEN_DEV }}
        run: |
          # Deploy REST API
          nomad job run \
            -var="gengine_image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" \
            -var="gengine_tag=${{ github.sha }}" \
            -var="environment=dev" \
            -var="log_level=DEBUG" \
            infrastructure/nomad/jobs/gengine-rest-api.nomad

      - name: Wait for deployment
        env:
          NOMAD_ADDR: ${{ secrets.NOMAD_ADDR_DEV }}
          NOMAD_TOKEN: ${{ secrets.NOMAD_TOKEN_DEV }}
        run: |
          timeout 300 bash -c 'until nomad job status gengine-rest-api | grep -q "Status.*running"; do sleep 10; done'

      - name: Run smoke tests
        run: |
          sleep 30
          curl -f https://dev-api.gengine.company.com/health || exit 1

  # Deploy to staging environment  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, container-scan]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging-api.gengine.company.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install Nomad CLI
        run: |
          wget https://releases.hashicorp.com/nomad/1.7.2/nomad_1.7.2_linux_amd64.zip
          unzip nomad_1.7.2_linux_amd64.zip
          sudo mv nomad /usr/local/bin/

      - name: Deploy to Nomad
        env:
          NOMAD_ADDR: ${{ secrets.NOMAD_ADDR_STAGING }}
          NOMAD_TOKEN: ${{ secrets.NOMAD_TOKEN_STAGING }}
        run: |
          # Deploy REST API with canary deployment
          nomad job run \
            -var="gengine_image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" \
            -var="gengine_tag=${{ github.sha }}" \
            -var="environment=staging" \
            -var="log_level=INFO" \
            infrastructure/nomad/jobs/gengine-rest-api.nomad

      - name: Wait for canary deployment
        env:
          NOMAD_ADDR: ${{ secrets.NOMAD_ADDR_STAGING }}
          NOMAD_TOKEN: ${{ secrets.NOMAD_TOKEN_STAGING }}
        run: |
          timeout 600 bash -c 'until nomad job status gengine-rest-api | grep -q "Canary.*running"; do sleep 15; done'

      - name: Run staging tests
        run: |
          sleep 60
          curl -f https://staging-api.gengine.company.com/health || exit 1
          # Add more comprehensive staging tests here

      - name: Promote canary deployment
        env:
          NOMAD_ADDR: ${{ secrets.NOMAD_ADDR_STAGING }}
          NOMAD_TOKEN: ${{ secrets.NOMAD_TOKEN_STAGING }}
        run: |
          nomad deployment promote $(nomad job deployments gengine-rest-api | head -n2 | tail -n1 | awk '{print $1}')

  # Deploy to production environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: production
      url: https://api.gengine.company.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install Nomad CLI
        run: |
          wget https://releases.hashicorp.com/nomad/1.7.2/nomad_1.7.2_linux_amd64.zip
          unzip nomad_1.7.2_linux_amd64.zip
          sudo mv nomad /usr/local/bin/

      - name: Deploy to Nomad Production
        env:
          NOMAD_ADDR: ${{ secrets.NOMAD_ADDR_PROD }}
          NOMAD_TOKEN: ${{ secrets.NOMAD_TOKEN_PROD }}
        run: |
          # Deploy REST API with blue-green deployment
          nomad job run \
            -var="gengine_image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" \
            -var="gengine_tag=${{ github.sha }}" \
            -var="environment=production" \
            -var="log_level=WARN" \
            infrastructure/nomad/jobs/gengine-rest-api.nomad

      - name: Wait for production deployment
        env:
          NOMAD_ADDR: ${{ secrets.NOMAD_ADDR_PROD }}
          NOMAD_TOKEN: ${{ secrets.NOMAD_TOKEN_PROD }}
        run: |
          timeout 900 bash -c 'until nomad job status gengine-rest-api | grep -q "Status.*running"; do sleep 20; done'

      - name: Run production health checks
        run: |
          sleep 120
          curl -f https://api.gengine.company.com/health || exit 1

      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Cleanup PR environments
  cleanup-pr:
    name: Cleanup PR Environment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install Nomad CLI
        run: |
          wget https://releases.hashicorp.com/nomad/1.7.2/nomad_1.7.2_linux_amd64.zip
          unzip nomad_1.7.2_linux_amd64.zip
          sudo mv nomad /usr/local/bin/

      - name: Stop PR environment
        env:
          NOMAD_ADDR: ${{ secrets.NOMAD_ADDR_DEV }}
          NOMAD_TOKEN: ${{ secrets.NOMAD_TOKEN_DEV }}
        run: |
          nomad job stop -purge "gengine-rest-api-pr-${{ github.event.number }}" || true